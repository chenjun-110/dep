var filelist = ''
var list = {}

// // 一个 JavaScript 命名函数。
// function MyExampleWebpackPlugin() {

// };

// // 在插件函数的 prototype 上定义一个 `apply` 方法。
// MyExampleWebpackPlugin.prototype.apply = function (compiler) {
//   // // 指定一个挂载到 webpack 自身的事件钩子。
//   // compiler.plugin('webpacksEventHook', function (compilation /* 处理 webpack 内部实例的特定数据。*/, callback) {
//   //   console.log("This is an example plugin!!!")

//   //   // 功能完成后调用 webpack 提供的回调。
//   //   callback()
//   // })

//   // 设置回调来访问 compilation 对象：
//   // compiler.plugin("compilation", function(compilation) {

//   //   // 现在，设置回调来访问 compilation 中的步骤：
//   //   compilation.plugin("optimize", function() {
//   //     console.log("王炸！！！！！！！.");
//   //   });
//   // });
//   compiler.plugin('emit', function (compilation, callback) {
//     // 在生成文件中，创建一个头部字符串：
//     filelist += `compilation:\n${Object.keys(compilation)}\n`;
//     filelist += `chunks:\n${Object.keys(compilation.chunks[7])}\n`;
//     for (let key in compilation.chunks[7]) {
//       filelist += `key:\n${compilation.chunks[7][key].toString()}\n`;
//     }
//     // 遍历所有编译过的资源文件，
//     // 对于每个文件名称，都添加一行内容。
//     // for (var filename in compilation.assets) {
//     //   filelist += ('- ' + filename + '\n');
//     // }

//     // compilation.chunks.forEach(function (chunk) {
//     //   // 检索 chunk 中（内置输入的）的每个模块：
//     //   chunk.modules && chunk.modules.forEach(function (module) {
//     //     // 检索模块中包含的每个源文件路径：
//     //     module.fileDependencies.forEach(function (filepath) {
//     //       // 我们现在已经对源结构有不少了解……
//     //     });
//     //   });
//     //   console.log('文件', chunk.dependencies)
//     //   filelist += ('- resource:' + (chunk.modules && chunk.modules.length) + ' abc ' + chunk.files + '\n')
    
//     //   // 检索由 chunk 生成的每个资源(asset)文件名：
//     //   chunk.files.forEach(function (filename) {
//     //     // Get the asset source for each file generated by the chunk:
//     //     var source = compilation.assets[filename].source();
//     //     filelist += ('- source' + typeof compilation.assets[filename] + '\n')
//     //   });
//     // });
//     // 将这个列表作为一个新的文件资源，插入到 webpack 构建中：
//     compilation.assets['filelist.md'] = {
//       source: function () {
//         return filelist;
//       },
//       size: function () {
//         return filelist.length;
//       }
//     };

//     callback();
//   });
// }
// module.exports = MyExampleWebpackPlugin;
module.exports = class MyExampleWebpackPlugin {
  beforeResolve = (resolveData, callback) => {
    const { context, contextInfo, request } = resolveData;
    const { issuer } = contextInfo;
    filelist += issuer + `\n`
    console.log('issuer', issuer);
    callback()
  }
  afterResolve = (result, callback) => {
    const { context, contextInfo, request } = result;
    // const { issuer } = contextInfo;
    const { resourceResolveData } = result;
    let {
        context:{
          issuer
        },
        path
    } = resourceResolveData;
    let json = {
      path, issuer
    }
    // console.log('类型', typeof issuer);
    // if (typeof issuer === 'string' && issuer.toString().indexOf('node_modules') > -1) {
    //   return callback()
    // }
    // console.log('issuer', issuer);
    // console.log('path', path);
    if (list[path]) {
      list[path].push(issuer)
    } else {
      list[path] = [issuer]
    }
    callback()
  }
 
  handleFinishModules = (modules, callback) => {
    callback()
  }
 
  apply(compiler) {
    compiler.hooks.normalModuleFactory.tap(
      "MyExampleWebpackPlugin",
      nmf => {
        
        // nmf.hooks.beforeResolve.tapAsync(
        //   "MyExampleWebpackPlugin",
        //   this.beforeResolve
        // )
        
        nmf.hooks.afterResolve.tapAsync(
          "MyExampleWebpackPlugin",
          this.afterResolve
        )
      }
    )
    
    compiler.hooks.compilation.tap(
      "MyExampleWebpackPlugin",
      
      compilation => {
        compilation.hooks.finishModules.tapAsync(
          "MyExampleWebpackPlugin",
          this.handleFinishModules
        )
      }
    )

    compiler.plugin('emit', function (compilation, callback) {
      //过滤
      let obj = {}
      //去重
      for (let path in list) {
        if (!path.includes('node_modules')) {
          obj[path] = [...new Set(list[path])]
        }
      }
      filelist += JSON.stringify(obj) + `\n`
      filelist = filelist.replace(/\\/g, `/`)
      compilation.assets['filelist.json'] = {
        source: function () {
          return filelist;
        },
        size: function () {
          return filelist.length;
        }
      }
      callback()
    })
  }
}